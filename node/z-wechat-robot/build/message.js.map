{"version":3,"sources":["../src/message.js"],"names":["botInstance","extend","messageInstance","Object","setPrototypeOf","messageProto","init","MsgType","OriginalContent","Content","isSentBySelf","FromUserName","_user","UserName","indexOf","replace","match","user","_contacts","MemberList","find","member","Contact","getDisplayName","isSentBy","contact","getPeerUserName","ToUserName","getDisplayTime","time","Date","CreateTime","getHours","getMinutes"],"mappings":";;;;;;kBA4Ge,UAAUA,WAAV,EAAuB;AACrC,QAAO;AACN;;;;;;;;;;;;AAYAC,UAAQ,gBAAUC,eAAV,EAA2B;AAClCA,qBAAkBC,OAAOC,cAAP,CAAsBF,eAAtB,EAAuCG,YAAvC,CAAlB;AACA,UAAOH,gBAAgBI,IAAhB,CAAqBN,WAArB,CAAP;AACA;AAhBK,EAAP;AAkBA,C;;AA/HD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;AAGA,IAAMK,eAAe;AACpB;;;;;AAKAC,OAAM,cAAUN,WAAV,EAAuB;AAAA;;AAC5B,OAAKO,OAAL,GAAe,CAAC,KAAKA,OAArB;AACA,OAAKC,eAAL,GAAuB,KAAKC,OAA5B;;AAEA,OAAKC,YAAL,GAAoB,KAAKC,YAAL,KAAsBX,YAAYY,KAAZ,CAAkBC,QAAxC,IAAoD,KAAKF,YAAL,KAAsB,EAA9F;;AAEA,MAAI,KAAKA,YAAL,CAAkBG,OAAlB,CAA0B,IAA1B,MAAoC,CAAxC,EAA2C;AAC1C,QAAKL,OAAL,GAAe,KAAKA,OAAL,CAAaM,OAAb,CAAqB,YAArB,EAAmC,UAACC,KAAD,EAAW;AAC5D,QAAIC,OAAOjB,YAAYkB,SAAZ,CAAsB,MAAKP,YAA3B,EAAyCQ,UAAzC,CAAoDC,IAApD,CAAyD,UAACC,MAAD,EAAY;AAC/E,YAAOA,OAAOR,QAAP,KAAoBG,KAA3B;AACA,KAFU,CAAX;AAGA,WAAOC,OAAOjB,YAAYsB,OAAZ,CAAoBC,cAApB,CAAmCN,IAAnC,CAAP,GAAkDD,KAAzD;AACA,IALc,CAAf;AAMA;;AAED,OAAKP,OAAL,GAAe,KAAKA,OAAL,CAAaM,OAAb,CAAqB,OAArB,EAA8B,GAA9B,EACbA,OADa,CACL,OADK,EACI,GADJ,EAEbA,OAFa,CAEL,SAFK,EAEM,IAFN,CAAf;;AAIA,OAAKN,OAAL,GAAe,wBAAa,KAAKA,OAAlB,CAAf;;AAEA,SAAO,IAAP;AACA,EA5BmB;;AA8BpB;;;;;;;;;AASAe,WAAU,kBAAUC,OAAV,EAAmB;AAC5B,SAAO,KAAKd,YAAL,KAAsBc,QAAQZ,QAArC;AACA,EAzCmB;;AA2CpB;;;;;;;AAOAa,kBAAiB,2BAAY;AAC5B,SAAO,KAAKhB,YAAL,GAAoB,KAAKiB,UAAzB,GAAsC,KAAKhB,YAAlD;AACA,EApDmB;;AAsDpB;;;;;;;AAOAiB,iBAAgB,0BAAY;AAC3B,MAAIC,OAAO,IAAIC,IAAJ,CAAS,OAAO,KAAKC,UAArB,CAAX;AACA,SAAOF,KAAKG,QAAL,KAAkB,GAAlB,GAAwB,wBAAaH,KAAKI,UAAL,EAAb,EAAgC,CAAhC,CAA/B;AACA;AAhEmB,CAArB;;AAmEA","file":"message.js","sourcesContent":["import { convertEmoji, formatNumber } from \"./util\";\r\n\r\n/* Message Object Example\r\n{\r\n    \"FromUserName\": \"\",\r\n    \"ToUserName\": \"\",\r\n    \"Content\": \"\",\r\n    \"StatusNotifyUserName\": \"\",\r\n    \"ImgWidth\": 0,\r\n    \"PlayLength\": 0,\r\n    \"RecommendInfo\": {},\r\n    \"StatusNotifyCode\": 4,\r\n    \"NewMsgId\": \"\",\r\n    \"Status\": 3,\r\n    \"VoiceLength\": 0,\r\n    \"ForwardFlag\": 0,\r\n    \"AppMsgType\": 0,\r\n    \"Ticket\": \"\",\r\n    \"AppInfo\": {...},\r\n    \"Url\": \"\",\r\n    \"ImgStatus\": 1,\r\n    \"MsgType\": 1,\r\n    \"ImgHeight\": 0,\r\n    \"MediaId\": \"\",\r\n    \"MsgId\": \"\",\r\n    \"FileName\": \"\",\r\n    \"HasProductId\": 0,\r\n    \"FileSize\": \"\",\r\n    \"CreateTime\": 0,\r\n    \"SubMsgType\": 0\r\n}\r\n*/\r\n\r\n/**\r\n * 消息对象\r\n */\r\nconst messageProto = {\r\n\t/**\r\n\t * 初始化消息对象\r\n\t * @param {Object} botInstance - 实例对象\r\n\t * @returns {Object} - 初始化后的消息对象\r\n\t */\r\n\tinit: function (botInstance) {\r\n\t\tthis.MsgType = +this.MsgType;\r\n\t\tthis.OriginalContent = this.Content;\r\n\r\n\t\tthis.isSentBySelf = this.FromUserName === botInstance._user.UserName || this.FromUserName === \"\";\r\n\r\n\t\tif (this.FromUserName.indexOf(\"@@\") === 0) {\r\n\t\t\tthis.Content = this.Content.replace(/^@.*?(?=:)/, (match) => {\r\n\t\t\t\tlet user = botInstance._contacts[this.FromUserName].MemberList.find((member) => {\r\n\t\t\t\t\treturn member.UserName === match;\r\n\t\t\t\t});\r\n\t\t\t\treturn user ? botInstance.Contact.getDisplayName(user) : match;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.Content = this.Content.replace(/&lt;/g, \"<\")\r\n\t\t\t.replace(/&gt;/g, \">\")\r\n\t\t\t.replace(/<br\\/>/g, \"\\n\");\r\n\r\n\t\tthis.Content = convertEmoji(this.Content);\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\t/**\r\n\t * 判断消息是否由指定联系人发送\r\n\t * @param {Object} contact - 联系人对象\r\n\t * @returns {boolean} - 如果消息是由指定联系人发送则返回 true，否则返回 false\r\n\t * @example\r\n\t * const message = { FromUserName: '123', isSentBySelf: false };\r\n\t * const contact = { UserName: '123' };\r\n\t * const isSentBy = message.isSendBy(contact); // true\r\n\t */\r\n\tisSentBy: function (contact) {\r\n\t\treturn this.FromUserName === contact.UserName;\r\n\t},\r\n\r\n\t/**\r\n\t * 获取对方的用户名\r\n\t * @returns {string} - 对方的用户名\r\n\t * @example\r\n\t * const message = { FromUserName: '123', ToUserName: '456' };\r\n\t * const peerUserName = message.getPeerUserName(); // '456'\r\n\t */\r\n\tgetPeerUserName: function () {\r\n\t\treturn this.isSentBySelf ? this.ToUserName : this.FromUserName;\r\n\t},\r\n\r\n\t/**\r\n\t * 获取消息的显示时间\r\n\t * @returns {string} - 消息的显示时间，格式为 \"时:分\"\r\n\t * @example\r\n\t * const message = { CreateTime: 1612345678 };\r\n\t * const displayTime = message.getDisplayTime(); // '12:34'\r\n\t */\r\n\tgetDisplayTime: function () {\r\n\t\tvar time = new Date(1000 * this.CreateTime);\r\n\t\treturn time.getHours() + \":\" + formatNumber(time.getMinutes(), 2);\r\n\t},\r\n};\r\n\r\n/**\r\n * 消息工厂函数\r\n * @param {*} botInstance 实例对象(WeChatBot对象)\r\n * @returns\r\n */\r\nexport default function (botInstance) {\r\n\treturn {\r\n\t\t/**\r\n\t\t * 扩展消息对象\r\n\t\t * @param {Object} messageInstance - 消息对象\r\n\t\t * @returns {Object} - 初始化后的消息对象\r\n\t\t * @example\r\n\t\t * const botInstance = {/* 实例对象 *\\/};\r\n\t\t * const messageInstance = {/* 消息对象 *\\/};\r\n\t\t *\r\n\t\t * const messageFactory = MessageFactory(botInstance);\r\n\t\t *\r\n\t\t * const message = messageFactory.extend(messageInstance);\r\n\t\t */\r\n\t\textend: function (messageInstance) {\r\n\t\t\tmessageInstance = Object.setPrototypeOf(messageInstance, messageProto);\r\n\t\t\treturn messageInstance.init(botInstance);\r\n\t\t},\r\n\t};\r\n}\r\n"]}