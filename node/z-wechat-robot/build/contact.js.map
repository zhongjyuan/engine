{"version":3,"sources":["../src/contact.js"],"names":["botInstance","extend","contactInstance","Object","setPrototypeOf","contactProto","init","getUserByUserName","userName","_contacts","contacts","find","contact","username","keyword","users","key","canSearch","push","isSelf","UserName","_user","isRoomContact","MemberCount","RemarkName","DisplayName","NickName","getDisplayName","MemberList","test","_config","SPECIALUSERS","indexOf","VerifyFlag","MM_USERATTRVERIFYFALG_BIZ_BRAND","OriginalNickName","OriginalRemarkName","OriginalDisplayName","toUpperCase","isSatisfy","RemarkPYQuanPin","PYQuanPin","Alias","KeyWord","isSpecialContact","isShieldUser","SHIELDUSERS","isMPContact"],"mappings":"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","file":"contact.js","sourcesContent":["import { convertEmoji } from \"./util\";\r\n\r\n/**\r\n * 联系人对象\r\n */\r\nconst contactProto = {\r\n\t/**\r\n\t * 初始化联系人对象\r\n\t * @param {Object} botInstance - 实例对象(weixin对象)\r\n\t * @returns {Object} - 初始化后的联系人对象\r\n\t */\r\n\tinit: function (botInstance) {\r\n\t\tthis._config = botInstance._config;\r\n\r\n\t\tthis.OriginalNickName = this.OriginalNickName = this.NickName;\r\n\t\tthis.OriginalRemarkName = this.OriginalRemarkName = this.RemarkName;\r\n\t\tthis.OriginalDisplayName = this.OriginalDisplayName = this.DisplayName;\r\n\r\n\t\tthis.NickName = convertEmoji(this.NickName);\r\n\t\tthis.RemarkName = convertEmoji(this.RemarkName);\r\n\t\tthis.DisplayName = convertEmoji(this.DisplayName);\r\n\r\n\t\tthis.isSelf = this.UserName === botInstance._user.UserName;\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\t/**\r\n\t * 获取显示名称\r\n\t * @returns {string} - 联系人的显示名称\r\n\t */\r\n\tgetDisplayName: function () {\r\n\t\tif (this.isRoomContact(this)) {\r\n\t\t\tif (this.MemberCount >= 2) {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t\"[群] \" +\r\n\t\t\t\t\t(this.RemarkName ||\r\n\t\t\t\t\t\tthis.DisplayName ||\r\n\t\t\t\t\t\tthis.NickName ||\r\n\t\t\t\t\t\t`${this.getDisplayName(this.MemberList[0])}、${this.getDisplayName(this.MemberList[1])}`)\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\treturn \"[群] \" + (this.RemarkName || this.DisplayName || this.NickName || `${this.getDisplayName(this.MemberList[0])}`);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn this.DisplayName || this.RemarkName || this.NickName || this.UserName;\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t * 判断联系人是否可以被搜索\r\n\t * @param {string} keyword - 搜索关键词\r\n\t * @returns {boolean} - 如果联系人可以被搜索则返回 true，否则返回 false\r\n\t * @example\r\n\t * const contact = { RemarkName: 'John', NickName: 'Doe' };\r\n\t * const canSearch = contact.canSearch('John'); // true\r\n\t * const canSearch2 = contact.canSearch('Jane'); // false\r\n\t */\r\n\tcanSearch: function (keyword) {\r\n\t\tif (!keyword) return false;\r\n\t\tkeyword = keyword.toUpperCase();\r\n\r\n\t\tlet isSatisfy = (key) => (key || \"\").toUpperCase().indexOf(keyword) >= 0;\r\n\t\treturn (\r\n\t\t\tisSatisfy(this.RemarkName) ||\r\n\t\t\tisSatisfy(this.RemarkPYQuanPin) ||\r\n\t\t\tisSatisfy(this.NickName) ||\r\n\t\t\tisSatisfy(this.PYQuanPin) ||\r\n\t\t\tisSatisfy(this.Alias) ||\r\n\t\t\tisSatisfy(this.KeyWord)\r\n\t\t);\r\n\t},\r\n\r\n\t/**\r\n\t * 是否为群聊联系人\r\n\t * @returns\r\n\t */\r\n\tisRoomContact: function () {\r\n\t\treturn this.UserName ? /^@@|@chatroom$/.test(this.UserName) : false;\r\n\t},\r\n\r\n\t/**\r\n\t * 是否为特殊用户\r\n\t * @returns\r\n\t */\r\n\tisSpecialContact: function () {\r\n\t\treturn this._config.SPECIALUSERS.indexOf(this.UserName) >= 0;\r\n\t},\r\n\r\n\t/**\r\n\t * 是否为屏蔽联系人\r\n\t * @returns\r\n\t */\r\n\tisShieldUser: function () {\r\n\t\treturn this._config.SHIELDUSERS.indexOf(this.UserName) >= 0;\r\n\t},\r\n\r\n\t/**\r\n\t * 是否为公众号联系人\r\n\t * @returns\r\n\t */\r\n\tisMPContact() {\r\n\t\treturn this.VerifyFlag & this._config.MM_USERATTRVERIFYFALG_BIZ_BRAND;\r\n\t},\r\n};\r\n\r\n/**\r\n * 联系人工厂函数\r\n * @param {*} botInstance 实例对象(WeChatBot对象)\r\n * @returns\r\n */\r\nexport default function (botInstance) {\r\n\treturn {\r\n\t\t/**\r\n\t\t * 扩展联系人对象\r\n\t\t * @param {Object} contactInstance - 要扩展的联系人对象\r\n\t\t * @returns {Object} - 扩展并初始化后的联系人对象\r\n\t\t */\r\n\t\textend: function (contactInstance) {\r\n\t\t\tcontactInstance = Object.setPrototypeOf(contactInstance, contactProto);\r\n\t\t\treturn contactInstance.init(botInstance);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * 根据用户名获取用户\r\n\t\t * @param {string} userName - 用户名\r\n\t\t * @returns {Object|null} - 用户对象，如果未找到则返回 null\r\n\t\t */\r\n\t\tgetUserByUserName: function (userName) {\r\n\t\t\tif (!botInstance._contacts) return null; // 如果成员列表为空，则直接返回 null\r\n\r\n\t\t\treturn botInstance._contacts[userName] || null;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * 根据用户名从成员列表中获取用户信息\r\n\t\t * @param {Array} contacts - 成员列表\r\n\t\t * @param {string} username - 用户名\r\n\t\t * @returns {Object|null} - 匹配到的用户信息，如果未找到则返回 null\r\n\t\t * @example\r\n\t\t * const contacts = [\r\n\t\t *   { username: 'user1', nickname: '小明' },\r\n\t\t *   { username: 'user2', nickname: '小红' },\r\n\t\t *   { username: 'user3', nickname: '小刚' },\r\n\t\t * ];\r\n\t\t * const user = getUserByUsername(contacts, 'user2'); // { username: 'user2', nickname: '小红' }\r\n\t\t */\r\n\t\tgetUserByUserName: function (contacts, userName) {\r\n\t\t\tif (!contacts) return null; // 如果成员列表为空，则直接返回 null\r\n\r\n\t\t\t// 使用数组的 find 方法查找匹配到的用户信息\r\n\t\t\treturn contacts.find((contact) => contact.username === userName);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * 根据关键词搜索用户\r\n\t\t * @param {string} keyword - 搜索关键词\r\n\t\t * @returns {Array} - 包含符合搜索条件的用户对象的数组\r\n\t\t * @example\r\n\t\t * const factory = ContactFactory(botInstance);\r\n\t\t * const users = factory.searchUser('John');\r\n\t\t */\r\n\t\tsearchUser: function (keyword) {\r\n\t\t\tlet users = [];\r\n\r\n\t\t\tfor (let key in botInstance._contacts) {\r\n\t\t\t\tif (botInstance._contacts[key].canSearch(keyword)) {\r\n\t\t\t\t\tusers.push(botInstance._contacts[key]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn users;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * 根据关键词搜索用户\r\n\t\t * @param {string} keyword - 搜索关键词\r\n\t\t * @returns {Array} - 包含符合搜索条件的用户对象的数组\r\n\t\t * @example\r\n\t\t * const factory = ContactFactory(botInstance);\r\n\t\t * const users = factory.searchUser('John');\r\n\t\t */\r\n\t\tsearchUser: function (contacts, keyword) {\r\n\t\t\tlet users = [];\r\n\r\n\t\t\tfor (let key in contacts) {\r\n\t\t\t\tif (contacts[key].canSearch(keyword)) {\r\n\t\t\t\t\tusers.push(contacts[key]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn users;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * 判断联系人是否为自己\r\n\t\t * @param {Object} contact - 联系人对象\r\n\t\t * @returns {boolean} - 如果联系人是自己则返回 true，否则返回 false\r\n\t\t * @example\r\n\t\t * const factory = ContactFactory(botInstance);\r\n\t\t * const contact = { UserName: '123', isSelf: false };\r\n\t\t * const isSelf = factory.isSelf(contact); // false\r\n\t\t */\r\n\t\tisSelf: function (contact) {\r\n\t\t\treturn contact.isSelf || contact.UserName === botInstance._user.UserName;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * 获取联系人的显示名称\r\n\t\t * @param {Object} contact - 联系人信息\r\n\t\t * @returns {string} - 联系人的显示名称\r\n\t\t * @example\r\n\t\t * const roomContact = {\r\n\t\t *   RemarkName: '备注名',\r\n\t\t *   DisplayName: '显示名称',\r\n\t\t *   NickName: '昵称',\r\n\t\t *   MemberCount: 2,\r\n\t\t *   MemberList: [\r\n\t\t *     { DisplayName: '成员1' },\r\n\t\t *     { DisplayName: '成员2' }\r\n\t\t *   ]\r\n\t\t * };\r\n\t\t * const userContact = {\r\n\t\t *   DisplayName: '显示名称',\r\n\t\t *   RemarkName: '备注名',\r\n\t\t *   NickName: '昵称',\r\n\t\t *   UserName: '用户名'\r\n\t\t * };\r\n\t\t * const displayName = getDisplayName(roomContact); // \"[群] 显示名称\"\r\n\t\t * const displayName2 = getDisplayName(userContact); // \"显示名称\"\r\n\t\t */\r\n\t\tgetDisplayName: function (contact) {\r\n\t\t\tif (isRoomContact(contact)) {\r\n\t\t\t\tif (contact.MemberCount >= 2) {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\"[群] \" +\r\n\t\t\t\t\t\t(contact.RemarkName ||\r\n\t\t\t\t\t\t\tcontact.DisplayName ||\r\n\t\t\t\t\t\t\tcontact.NickName ||\r\n\t\t\t\t\t\t\t`${getDisplayName(contact.MemberList[0])}、${getDisplayName(contact.MemberList[1])}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn \"[群] \" + (contact.RemarkName || contact.DisplayName || contact.NickName || `${getDisplayName(contact.MemberList[0])}`);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn contact.DisplayName || contact.RemarkName || contact.NickName || contact.UserName;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * 判断联系人是否为群聊联系人\r\n\t\t * @param {Object} contact - 联系人信息\r\n\t\t * @returns {boolean} - 如果联系人是群聊联系人则返回 true，否则返回 false\r\n\t\t * @example\r\n\t\t * const roomContact = { UserName: '@@1234567890@chatroom' };\r\n\t\t * const userContact = { UserName: 'user1' };\r\n\t\t * const isRoom = isRoomContact(roomContact); // true\r\n\t\t * const isRoom2 = isRoomContact(userContact); // false\r\n\t\t */\r\n\t\tisRoomContact: function (contact) {\r\n\t\t\treturn contact.UserName ? /^@@|@chatroom$/.test(contact.UserName) : false;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * 判断联系人是否为特殊用户\r\n\t\t * @param {Object} contact - 联系人信息\r\n\t\t * @returns {boolean} - 如果联系人是特殊用户则返回 true，否则返回 false\r\n\t\t * @example\r\n\t\t * const specialContact = { UserName: 'specialUser1' };\r\n\t\t * const normalContact = { UserName: 'user1' };\r\n\t\t * const isSpecial = isSpContact(specialContact); // true\r\n\t\t * const isSpecial2 = isSpContact(normalContact); // false\r\n\t\t */\r\n\t\tisSpContact: function (contact) {\r\n\t\t\treturn botInstance._config.SPECIALUSERS.indexOf(contact.UserName) >= 0;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * 判断联系人是否为公众号联系人\r\n\t\t * @param {Object} contact - 联系人信息\r\n\t\t * @returns {boolean} - 如果联系人是公众号联系人则返回 true，否则返回 false\r\n\t\t * @example\r\n\t\t * const publicContact = { VerifyFlag: 8 };\r\n\t\t * const normalContact = { VerifyFlag: 0 };\r\n\t\t * const isPublic = isPublicContact(publicContact); // true\r\n\t\t * const isPublic2 = isPublicContact(normalContact); // false\r\n\t\t */\r\n\t\tisPublicContact: function (contact) {\r\n\t\t\treturn contact.VerifyFlag & botInstance._config.MM_USERATTRVERIFYFALG_BIZ_BRAND;\r\n\t\t},\r\n\t};\r\n}\r\n"]}