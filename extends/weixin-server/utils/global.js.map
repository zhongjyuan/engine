{"version":3,"sources":["../../../modules/weixin-server/src/utils/global.js"],"names":["isBrowserEnv","formatNumber","randomString","generateClientMsgID","generateDeviceID","convertEmoji","debug","window","document","createElement","number","length","isNaN","toString","paddingLength","Array","join","prefix","randomNum","Math","round","random","currentTimeStamp","Date","now","toFixed","replace","substring","inputString","emojiMap","match","capture","emojiCode","toLowerCase","codePoints","push","slice","Error","String","fromCodePoint","error"],"mappings":"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","file":"global.js","sourcesContent":["import _debug from \"debug\";\r\nconst debug = _debug(\"global\");\r\n\r\n/**\r\n * 检查当前环境是否为浏览器环境\r\n * @returns {boolean} - 如果当前环境为浏览器环境，则返回 true；否则返回 false。\r\n *\r\n * @example\r\n * const browserEnv = isBrowserEnv();\r\n * console.log(browserEnv); // 输出 true 或 false，表示当前环境是否为浏览器环境\r\n */\r\nexport function isBrowserEnv() {\r\n\treturn typeof window !== \"undefined\" && typeof document !== \"undefined\" && typeof document.createElement === \"function\";\r\n}\r\n\r\n/**\r\n * 格式化数字，将数字转换为指定长度的字符串，并在不足长度时在前面补零\r\n * @param {number} number - 要格式化的数字\r\n * @param {number} length - 格式化后的字符串长度\r\n * @returns {string} - 格式化后的字符串\r\n *\r\n * @example\r\n * const formattedNumber = formatNumber(5, 3);\r\n * console.log(formattedNumber); // 输出 \"005\"\r\n *\r\n * const formattedNumber2 = formatNumber(123, 2);\r\n * console.log(formattedNumber2); // 输出 \"123\"\r\n */\r\nexport function formatNumber(number, length) {\r\n\tnumber = (isNaN(number) ? 0 : number).toString();\r\n\tlet paddingLength = length - number.length;\r\n\r\n\treturn paddingLength > 0 ? [new Array(paddingLength + 1).join(\"0\"), number].join(\"\") : number;\r\n}\r\n\r\n/**\r\n * 生成一个随机数字符串，用于设置 Cookie 中的 pgv_pvi 和 pgv_si 属性\r\n * @param {string} [prefix=\"\"] - 字符串前缀\r\n * @returns {string} - 随机数字符串\r\n *\r\n * @example\r\n * const string = randomString(\"prefix\"); // 生成以 \"prefix\" 为前缀的随机数字符串\r\n * console.log(string); // 输出类似于 \"prefix1234567890\" 的字符串\r\n */\r\nexport function randomString(prefix = \"\") {\r\n\tconst randomNum = Math.round(Math.random() || 0.5) * 2147483647;\r\n\tconst currentTimeStamp = +new Date() % 1e10;\r\n\tconst randomString = `${prefix}${randomNum * currentTimeStamp}`;\r\n\r\n\treturn randomString;\r\n}\r\n\r\n/**\r\n * 生成客户端消息 ID\r\n * @returns {string} - 客户端消息 ID\r\n */\r\nexport function generateClientMsgID() {\r\n\treturn (Date.now() + Math.random().toFixed(3)).replace(\".\", \"\");\r\n}\r\n\r\n/**\r\n * 生成设备 ID\r\n * @returns {string} - 设备 ID\r\n */\r\nexport function generateDeviceID() {\r\n\treturn \"e\" + (\"\" + Math.random().toFixed(15)).substring(2, 17);\r\n}\r\n\r\n/**\r\n * 将包含表情符号的字符串转换为对应的 Unicode 表情字符\r\n * @param {string} inputString - 包含表情符号的字符串\r\n * @returns {string} - 转换后的字符串\r\n */\r\nexport function convertEmoji(inputString) {\r\n\t// 如果输入字符串为空，则返回空字符串\r\n\tif (!inputString) {\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t// 表情符号映射关系\r\n\tconst emojiMap = {\r\n\t\t\"1f639\": \"1f602\", // 替换 1f639 表情为 1f602\r\n\t\t\"1f64d\": \"1f614\", // 替换 1f64d 表情为 1f614\r\n\t};\r\n\r\n\ttry {\r\n\t\t// 使用正则表达式替换匹配到的表情符号\r\n\t\treturn inputString.replace(/<span.*?class=\"emoji emoji(.*?)\"><\\/span>/g, (match, capture) => {\r\n\t\t\tconst emojiCode = emojiMap[capture.toLowerCase()] || capture;\r\n\r\n\t\t\tconst codePoints = [];\r\n\t\t\tif (emojiCode.length === 4 || emojiCode.length === 5) {\r\n\t\t\t\tcodePoints.push(\"0x\" + emojiCode); // 添加第一个代码点\r\n\t\t\t} else if (emojiCode.length === 8) {\r\n\t\t\t\tcodePoints.push(\"0x\" + emojiCode.slice(0, 4)); // 添加第一个代码点\r\n\t\t\t\tcodePoints.push(\"0x\" + emojiCode.slice(4, 8)); // 添加第二个代码点\r\n\t\t\t} else if (emojiCode.length === 10) {\r\n\t\t\t\tcodePoints.push(\"0x\" + emojiCode.slice(0, 5)); // 添加第一个代码点\r\n\t\t\t\tcodePoints.push(\"0x\" + emojiCode.slice(5, 10)); // 添加第二个代码点\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(\"Unknown emoji characters\"); // 抛出错误，表示未知的表情字符\r\n\t\t\t}\r\n\r\n\t\t\treturn String.fromCodePoint(...codePoints); // 使用代码点生成 Unicode 表情字符\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tdebug(error);\r\n\t\treturn \"*\"; // 发生错误时返回星号作为占位符\r\n\t}\r\n}\r\n"]}