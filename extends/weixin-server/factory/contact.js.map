{"version":3,"sources":["../../../modules/weixin-server/src/factory/contact.js"],"names":["getUserByUsername","isRoomContact","isSpContact","isPublicContact","ContactFactory","Config","memberList","username","length","find","contact","getDisplayName","MemberCount","RemarkName","DisplayName","NickName","MemberList","UserName","test","SPECIALUSERS","indexOf","VerifyFlag","MM_USERATTRVERIFYFALG_BIZ_BRAND","contactProto","init","instance","OriginalNickName","OriginalRemarkName","OriginalDisplayName","isSelf","user","canSearch","keyword","toUpperCase","isSatisfy","key","RemarkPYQuanPin","PYQuanPin","Alias","KeyWord","extend","contactObj","Object","setPrototypeOf","getUserByUserName","contacts","getSearchUser","users","push"],"mappings":"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","file":"contact.js","sourcesContent":["import { getConfig } from \"../config\";\nimport { convertEmoji } from \"../utils/global\";\n\nconst Config = getConfig();\n\n/* Contact Object Example\n{\n  \"Uin\": 0,\n  \"UserName\": \"\",\n  \"NickName\": \"\",\n  \"HeadImgUrl\": \"\",\n  \"ContactFlag\": 3,\n  \"MemberCount\": 0,\n  \"MemberList\": [],\n  \"RemarkName\": \"\",\n  \"HideInputBarFlag\": 0,\n  \"Sex\": 0,\n  \"Signature\": \"\",\n  \"VerifyFlag\": 8,\n  \"OwnerUin\": 0,\n  \"PYInitial\": \"\",\n  \"PYQuanPin\": \"\",\n  \"RemarkPYInitial\": \"\",\n  \"RemarkPYQuanPin\": \"\",\n  \"StarFriend\": 0,\n  \"AppAccountFlag\": 0,\n  \"Statues\": 0,\n  \"AttrStatus\": 0,\n  \"Province\": \"\",\n  \"City\": \"\",\n  \"Alias\": \"Urinxs\",\n  \"SnsFlag\": 0,\n  \"UniFriend\": 0,\n  \"DisplayName\": \"\",\n  \"ChatRoomId\": 0,\n  \"KeyWord\": \"gh_\",\n  \"EncryChatRoomId\": \"\"\n}\n*/\n\n/**\n * 根据用户名从成员列表中获取用户信息\n * @param {Array} memberList - 成员列表\n * @param {string} username - 用户名\n * @returns {Object|null} - 匹配到的用户信息，如果未找到则返回 null\n * @example\n * const memberList = [\n *   { username: 'user1', nickname: '小明' },\n *   { username: 'user2', nickname: '小红' },\n *   { username: 'user3', nickname: '小刚' },\n * ];\n * const user = getUserByUsername(memberList, 'user2'); // { username: 'user2', nickname: '小红' }\n */\nexport function getUserByUsername(memberList, username) {\n\tif (!memberList.length) return null; // 如果成员列表为空，则直接返回 null\n\n\t// 使用数组的 find 方法查找匹配到的用户信息\n\treturn memberList.find((contact) => contact.username === username);\n}\n\n/**\n * 获取联系人的显示名称\n * @param {Object} contact - 联系人信息\n * @returns {string} - 联系人的显示名称\n * @example\n * const roomContact = {\n *   RemarkName: '备注名',\n *   DisplayName: '显示名称',\n *   NickName: '昵称',\n *   MemberCount: 2,\n *   MemberList: [\n *     { DisplayName: '成员1' },\n *     { DisplayName: '成员2' }\n *   ]\n * };\n * const userContact = {\n *   DisplayName: '显示名称',\n *   RemarkName: '备注名',\n *   NickName: '昵称',\n *   UserName: '用户名'\n * };\n * const displayName = getDisplayName(roomContact); // \"[群] 显示名称\"\n * const displayName2 = getDisplayName(userContact); // \"显示名称\"\n */\nexport function getDisplayName(contact) {\n\tif (isRoomContact(contact)) {\n\t\tif (contact.MemberCount >= 2) {\n\t\t\treturn (\n\t\t\t\t\"[群] \" +\n\t\t\t\t(contact.RemarkName ||\n\t\t\t\t\tcontact.DisplayName ||\n\t\t\t\t\tcontact.NickName ||\n\t\t\t\t\t`${getDisplayName(contact.MemberList[0])}、${getDisplayName(contact.MemberList[1])}`)\n\t\t\t);\n\t\t} else {\n\t\t\treturn \"[群] \" + (contact.RemarkName || contact.DisplayName || contact.NickName || `${getDisplayName(contact.MemberList[0])}`);\n\t\t}\n\t} else {\n\t\treturn contact.DisplayName || contact.RemarkName || contact.NickName || contact.UserName;\n\t}\n}\n\n/**\n * 判断联系人是否为群聊联系人\n * @param {Object} contact - 联系人信息\n * @returns {boolean} - 如果联系人是群聊联系人则返回 true，否则返回 false\n * @example\n * const roomContact = { UserName: '@@1234567890@chatroom' };\n * const userContact = { UserName: 'user1' };\n * const isRoom = isRoomContact(roomContact); // true\n * const isRoom2 = isRoomContact(userContact); // false\n */\nexport function isRoomContact(contact) {\n\treturn contact.UserName ? /^@@|@chatroom$/.test(contact.UserName) : false;\n}\n\n/**\n * 判断联系人是否为特殊用户\n * @param {Object} contact - 联系人信息\n * @returns {boolean} - 如果联系人是特殊用户则返回 true，否则返回 false\n * @example\n * const specialContact = { UserName: 'specialUser1' };\n * const normalContact = { UserName: 'user1' };\n * const isSpecial = isSpContact(specialContact); // true\n * const isSpecial2 = isSpContact(normalContact); // false\n */\nexport function isSpContact(contact) {\n\treturn Config.SPECIALUSERS.indexOf(contact.UserName) >= 0;\n}\n\n/**\n * 判断联系人是否为公众号联系人\n * @param {Object} contact - 联系人信息\n * @returns {boolean} - 如果联系人是公众号联系人则返回 true，否则返回 false\n * @example\n * const publicContact = { VerifyFlag: 8 };\n * const normalContact = { VerifyFlag: 0 };\n * const isPublic = isPublicContact(publicContact); // true\n * const isPublic2 = isPublicContact(normalContact); // false\n */\nexport function isPublicContact(contact) {\n\treturn contact.VerifyFlag & Config.MM_USERATTRVERIFYFALG_BIZ_BRAND;\n}\n\nconst contactProto = {\n\t/**\n\t * 初始化联系人对象\n\t * @param {Object} instance - 实例对象\n\t * @returns {Object} - 初始化后的联系人对象\n\t */\n\tinit: function (instance) {\n\t\t// 纠正错误以后保持兼容\n\t\tthis.OriginalNickName = this.OriginalNickName = this.NickName;\n\t\tthis.OriginalRemarkName = this.OriginalRemarkName = this.RemarkName;\n\t\tthis.OriginalDisplayName = this.OriginalDisplayName = this.DisplayName;\n\t\tthis.NickName = convertEmoji(this.NickName);\n\t\tthis.RemarkName = convertEmoji(this.RemarkName);\n\t\tthis.DisplayName = convertEmoji(this.DisplayName);\n\t\tthis.isSelf = this.UserName === instance.user.UserName;\n\n\t\treturn this;\n\t},\n\n\t/**\n\t * 获取显示名称\n\t * @returns {string} - 联系人的显示名称\n\t */\n\tgetDisplayName: function () {\n\t\treturn getDisplayName(this);\n\t},\n\n\t/**\n\t * 判断联系人是否可以被搜索\n\t * @param {string} keyword - 搜索关键词\n\t * @returns {boolean} - 如果联系人可以被搜索则返回 true，否则返回 false\n\t * @example\n\t * const contact = { RemarkName: 'John', NickName: 'Doe' };\n\t * const canSearch = contact.canSearch('John'); // true\n\t * const canSearch2 = contact.canSearch('Jane'); // false\n\t */\n\tcanSearch: function (keyword) {\n\t\tif (!keyword) return false;\n\t\tkeyword = keyword.toUpperCase();\n\n\t\tlet isSatisfy = (key) => (key || \"\").toUpperCase().indexOf(keyword) >= 0;\n\t\treturn (\n\t\t\tisSatisfy(this.RemarkName) ||\n\t\t\tisSatisfy(this.RemarkPYQuanPin) ||\n\t\t\tisSatisfy(this.NickName) ||\n\t\t\tisSatisfy(this.PYQuanPin) ||\n\t\t\tisSatisfy(this.Alias) ||\n\t\t\tisSatisfy(this.KeyWord)\n\t\t);\n\t},\n};\n\nexport default function ContactFactory(instance) {\n\treturn {\n\t\t/**\n\t\t * 扩展联系人对象\n\t\t * @param {Object} contactObj - 要扩展的联系人对象\n\t\t * @returns {Object} - 扩展并初始化后的联系人对象\n\t\t */\n\t\textend: function (contactObj) {\n\t\t\tcontactObj = Object.setPrototypeOf(contactObj, contactProto);\n\t\t\treturn contactObj.init(instance);\n\t\t},\n\n\t\t/**\n\t\t * 根据用户名获取用户\n\t\t * @param {string} UserName - 用户名\n\t\t * @returns {Object|null} - 用户对象，如果未找到则返回 null\n\t\t */\n\t\tgetUserByUserName: function (UserName) {\n\t\t\treturn instance.contacts[UserName] || null;\n\t\t},\n\n\t\t/**\n\t\t * 根据关键词搜索用户\n\t\t * @param {string} keyword - 搜索关键词\n\t\t * @returns {Array} - 包含符合搜索条件的用户对象的数组\n\t\t * @example\n\t\t * const factory = ContactFactory(instance);\n\t\t * const users = factory.getSearchUser('John');\n\t\t */\n\t\tgetSearchUser: function (keyword) {\n\t\t\tlet users = [];\n\t\t\tfor (let key in instance.contacts) {\n\t\t\t\tif (instance.contacts[key].canSearch(keyword)) {\n\t\t\t\t\tusers.push(instance.contacts[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn users;\n\t\t},\n\n\t\t/**\n\t\t * 判断联系人是否为自己\n\t\t * @param {Object} contact - 联系人对象\n\t\t * @returns {boolean} - 如果联系人是自己则返回 true，否则返回 false\n\t\t * @example\n\t\t * const factory = ContactFactory(instance);\n\t\t * const contact = { UserName: '123', isSelf: false };\n\t\t * const isSelf = factory.isSelf(contact); // false\n\t\t */\n\t\tisSelf: function (contact) {\n\t\t\treturn contact.isSelf || contact.UserName === instance.user.UserName;\n\t\t},\n\n\t\tgetDisplayName,\n\t\tisRoomContact,\n\t\tisPublicContact,\n\t\tisSpContact,\n\t};\n}\n"]}