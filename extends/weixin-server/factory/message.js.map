{"version":3,"sources":["../../../modules/weixin-server/src/factory/message.js"],"names":["MessageFactory","messageProto","init","instance","MsgType","isSentBySelf","FromUserName","user","UserName","OriginalContent","Content","indexOf","replace","match","contacts","MemberList","find","member","Contact","getDisplayName","isSentBy","contact","getPeerUserName","ToUserName","getDisplayTime","time","Date","CreateTime","getHours","getMinutes","extend","messageObj","Object","setPrototypeOf"],"mappings":";;;;;kBAuGwBA,c;;AAvGxB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,IAAMC,eAAe;AACpB;;;;;AAKAC,OAAM,cAAUC,QAAV,EAAoB;AAAA;;AACzB,OAAKC,OAAL,GAAe,CAAC,KAAKA,OAArB;AACA,OAAKC,YAAL,GAAoB,KAAKC,YAAL,KAAsBH,SAASI,IAAT,CAAcC,QAApC,IAAgD,KAAKF,YAAL,KAAsB,EAA1F;;AAEA,OAAKG,eAAL,GAAuB,KAAKC,OAA5B;AACA,MAAI,KAAKJ,YAAL,CAAkBK,OAAlB,CAA0B,IAA1B,MAAoC,CAAxC,EAA2C;AAC1C,QAAKD,OAAL,GAAe,KAAKA,OAAL,CAAaE,OAAb,CAAqB,YAArB,EAAmC,UAACC,KAAD,EAAW;AAC5D,QAAIN,OAAOJ,SAASW,QAAT,CAAkB,MAAKR,YAAvB,EAAqCS,UAArC,CAAgDC,IAAhD,CAAqD,UAACC,MAAD,EAAY;AAC3E,YAAOA,OAAOT,QAAP,KAAoBK,KAA3B;AACA,KAFU,CAAX;AAGA,WAAON,OAAOJ,SAASe,OAAT,CAAiBC,cAAjB,CAAgCZ,IAAhC,CAAP,GAA+CM,KAAtD;AACA,IALc,CAAf;AAMA;;AAED,OAAKH,OAAL,GAAe,KAAKA,OAAL,CAAaE,OAAb,CAAqB,OAArB,EAA8B,GAA9B,EACbA,OADa,CACL,OADK,EACI,GADJ,EAEbA,OAFa,CAEL,SAFK,EAEM,IAFN,CAAf;AAGA,OAAKF,OAAL,GAAe,0BAAa,KAAKA,OAAlB,CAAf;;AAEA,SAAO,IAAP;AACA,EA1BmB;;AA4BpB;;;;;;;;;AASAU,WAAU,kBAAUC,OAAV,EAAmB;AAC5B,SAAO,KAAKf,YAAL,KAAsBe,QAAQb,QAArC;AACA,EAvCmB;;AAyCpB;;;;;;;AAOAc,kBAAiB,2BAAY;AAC5B,SAAO,KAAKjB,YAAL,GAAoB,KAAKkB,UAAzB,GAAsC,KAAKjB,YAAlD;AACA,EAlDmB;;AAoDpB;;;;;;;AAOAkB,iBAAgB,0BAAY;AAC3B,MAAIC,OAAO,IAAIC,IAAJ,CAAS,OAAO,KAAKC,UAArB,CAAX;AACA,SAAOF,KAAKG,QAAL,KAAkB,GAAlB,GAAwB,0BAAaH,KAAKI,UAAL,EAAb,EAAgC,CAAhC,CAA/B;AACA;AA9DmB,CAArB;;AAiEA;;;;;AAKe,SAAS7B,cAAT,CAAwBG,QAAxB,EAAkC;AAChD,QAAO;AACN;;;;;;;;;;;;AAYA2B,UAAQ,gBAAUC,UAAV,EAAsB;AAC7BA,gBAAaC,OAAOC,cAAP,CAAsBF,UAAtB,EAAkC9B,YAAlC,CAAb;AACA,UAAO8B,WAAW7B,IAAX,CAAgBC,QAAhB,CAAP;AACA;AAhBK,EAAP;AAkBA","file":"message.js","sourcesContent":["import { convertEmoji, formatNumber } from \"../utils/global\";\n\n/* Message Object Example\n{\n    \"FromUserName\": \"\",\n    \"ToUserName\": \"\",\n    \"Content\": \"\",\n    \"StatusNotifyUserName\": \"\",\n    \"ImgWidth\": 0,\n    \"PlayLength\": 0,\n    \"RecommendInfo\": {},\n    \"StatusNotifyCode\": 4,\n    \"NewMsgId\": \"\",\n    \"Status\": 3,\n    \"VoiceLength\": 0,\n    \"ForwardFlag\": 0,\n    \"AppMsgType\": 0,\n    \"Ticket\": \"\",\n    \"AppInfo\": {...},\n    \"Url\": \"\",\n    \"ImgStatus\": 1,\n    \"MsgType\": 1,\n    \"ImgHeight\": 0,\n    \"MediaId\": \"\",\n    \"MsgId\": \"\",\n    \"FileName\": \"\",\n    \"HasProductId\": 0,\n    \"FileSize\": \"\",\n    \"CreateTime\": 0,\n    \"SubMsgType\": 0\n}\n*/\n\nconst messageProto = {\n\t/**\n\t * 初始化消息对象\n\t * @param {Object} instance - 实例对象\n\t * @returns {Object} - 初始化后的消息对象\n\t */\n\tinit: function (instance) {\n\t\tthis.MsgType = +this.MsgType;\n\t\tthis.isSentBySelf = this.FromUserName === instance.user.UserName || this.FromUserName === \"\";\n\n\t\tthis.OriginalContent = this.Content;\n\t\tif (this.FromUserName.indexOf(\"@@\") === 0) {\n\t\t\tthis.Content = this.Content.replace(/^@.*?(?=:)/, (match) => {\n\t\t\t\tlet user = instance.contacts[this.FromUserName].MemberList.find((member) => {\n\t\t\t\t\treturn member.UserName === match;\n\t\t\t\t});\n\t\t\t\treturn user ? instance.Contact.getDisplayName(user) : match;\n\t\t\t});\n\t\t}\n\n\t\tthis.Content = this.Content.replace(/&lt;/g, \"<\")\n\t\t\t.replace(/&gt;/g, \">\")\n\t\t\t.replace(/<br\\/>/g, \"\\n\");\n\t\tthis.Content = convertEmoji(this.Content);\n\n\t\treturn this;\n\t},\n\n\t/**\n\t * 判断消息是否由指定联系人发送\n\t * @param {Object} contact - 联系人对象\n\t * @returns {boolean} - 如果消息是由指定联系人发送则返回 true，否则返回 false\n\t * @example\n\t * const message = { FromUserName: '123', isSentBySelf: false };\n\t * const contact = { UserName: '123' };\n\t * const isSentBy = message.isSendBy(contact); // true\n\t */\n\tisSentBy: function (contact) {\n\t\treturn this.FromUserName === contact.UserName;\n\t},\n\n\t/**\n\t * 获取对方的用户名\n\t * @returns {string} - 对方的用户名\n\t * @example\n\t * const message = { FromUserName: '123', ToUserName: '456' };\n\t * const peerUserName = message.getPeerUserName(); // '456'\n\t */\n\tgetPeerUserName: function () {\n\t\treturn this.isSentBySelf ? this.ToUserName : this.FromUserName;\n\t},\n\n\t/**\n\t * 获取消息的显示时间\n\t * @returns {string} - 消息的显示时间，格式为 \"时:分\"\n\t * @example\n\t * const message = { CreateTime: 1612345678 };\n\t * const displayTime = message.getDisplayTime(); // '12:34'\n\t */\n\tgetDisplayTime: function () {\n\t\tvar time = new Date(1000 * this.CreateTime);\n\t\treturn time.getHours() + \":\" + formatNumber(time.getMinutes(), 2);\n\t},\n};\n\n/**\n * 消息工厂函数，用于创建和扩展消息对象\n * @param {Object} instance - 实例对象\n * @returns {Object} - 包含 extend 方法的对象\n */\nexport default function MessageFactory(instance) {\n\treturn {\n\t\t/**\n\t\t * 扩展消息对象\n\t\t * @param {Object} messageObj - 消息对象\n\t\t * @returns {Object} - 初始化后的消息对象\n\t\t * @example\n\t\t * const instance = {/* 实例对象 *\\/};\n\t\t * const messageObj = {/* 消息对象 *\\/};\n\t\t *\n\t\t * const messageFactory = MessageFactory(instance);\n\t\t *\n\t\t * const message = messageFactory.extend(messageObj);\n\t\t */\n\t\textend: function (messageObj) {\n\t\t\tmessageObj = Object.setPrototypeOf(messageObj, messageProto);\n\t\t\treturn messageObj.init(instance);\n\t\t},\n\t};\n}\n"]}