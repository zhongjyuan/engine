{"version":3,"sources":["../../modules/weixin-server/src/weixin.js"],"names":["debug","isBrowserEnv","process","on","err","console","log","Weixin","data","_","extend","EventEmitter","_contacts","_state","_config","STATE","init","_lastSyncTime","_syncPollingId","_syncErrorCount","_checkPollingId","_retryPollingId","_Contact","_Message","Date","toLocaleString","Seq","contacts","fetchContacts","then","res","MemberList","contactList","concat","emptyGroup","filter","contact","UserName","startsWith","MemberCount","length","fetchBatchContactInfo","catch","emit","msg","toUserName","sendTextMessage","emoticonMd5","sendEmoticonMessage","uploadMedia","file","filename","ext","sendPictureMessage","mediaId","sendVideoMessage","sendDocumentMessage","name","size","func","_getPollingMessage","_getPollingInterval","_getPollingTarget","id","login","performSyncCheck","selector","SYNCCHECK_SELECTOR_NORMAL","performSync","handleSync","now","syncPolling","AlreadyLogoutError","stop","Error","clearTimeout","setTimeout","restart","interval","sendMobileNotification","sendMessage","checkPolling","AddMsgCount","handleMessage","AddMsgList","ModContactCount","handleContact","ModContactList","forEach","Promise","resolve","FromUserName","batchGetContact","MsgType","MSGTYPE_STATUSNOTIFY","userList","StatusNotifyUserName","split","map","all","chunk","list","ToUserName","Content","test","oldContact","i","Object","assign","checkLogin","code","userAvatar","getUUID","uuid","redirect_uri","ContactList","_login","_init","response","logout","members","key","member","push","username","nickname","getDisplayName","py","avatar","AvatarUrl","WeixinCore"],"mappings":"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","file":"weixin.js","sourcesContent":["import _ from \"lodash\";\nimport _debug from \"debug\";\nimport EventEmitter from \"events\";\n\nimport { isBrowserEnv } from \"./utils/global\";\n\nimport ContactFactory from \"./factory/contact\";\nimport MessageFactory from \"./factory/message\";\n\nimport WeixinCore, { AlreadyLogoutError } from \"./core\";\n\nconst debug = _debug(\"weixin\");\n\nif (!isBrowserEnv) {\n\tprocess.on(\"uncaughtException\", (err) => {\n\t\tconsole.log(\"uncaughtException\", err);\n\t});\n}\n\n/**\n * 微信客户端类，继承自WeixinCore类\n */\nexport default class Weixin extends WeixinCore {\n\t/**\n\t * 构造函数\n\t * @param {Object} data - 包含微信账号登录信息的数据对象\n\t */\n\tconstructor(data = {}) {\n\t\tsuper(data);\n\n\t\t// 用EventEmitter扩展this对象，使其具备事件监听和触发的能力\n\t\t_.extend(this, new EventEmitter());\n\n\t\t/**所有联系人的集合 */\n\t\tthis._contacts = {};\n\t\t/**状态 */\n\t\tthis._state = this._config.STATE.init;\n\t\t/**上一次同步时间 */\n\t\tthis._lastSyncTime = 0;\n\t\t/**同步轮询ID */\n\t\tthis._syncPollingId = 0;\n\t\t/**同步错误计数 */\n\t\tthis._syncErrorCount = 0;\n\t\t/**检查轮询ID */\n\t\tthis._checkPollingId = 0;\n\t\t/**重试轮询ID */\n\t\tthis._retryPollingId = 0;\n\n\t\t// 通过ContactFactory创建Contact对象，并传入当前Weixin实例\n\t\t/**Contact对象 */\n\t\tthis._Contact = ContactFactory(this);\n\t\t// 通过MessageFactory创建Message对象，并传入当前Weixin实例\n\t\t/**Message对象 */\n\t\tthis._Message = MessageFactory(this);\n\t}\n\n\t/**\n\t * @description 获取轮询消息的默认文本内容\n\t * @return {String} 默认文本内容\n\t */\n\t_getPollingMessage() {\n\t\treturn \"心跳：\" + new Date().toLocaleString();\n\t}\n\n\t/**\n\t * @description 获取轮询消息的默认间隔时间\n\t * @return {Number} 默认间隔时间，单位为毫秒\n\t */\n\t_getPollingInterval() {\n\t\treturn 5 * 60 * 1000;\n\t}\n\n\t/**\n\t * @description 获取轮询消息的默认目标用户\n\t * @return {String} 默认目标用户\n\t */\n\t_getPollingTarget() {\n\t\treturn \"filehelper\";\n\t}\n\n\t/**\n\t * 获取好友列表\n\t * @returns {Array} - 包含好友信息的数组\n\t */\n\tget friendList() {\n\t\tlet members = [];\n\n\t\t// 遍历联系人列表，获取好友信息\n\t\tfor (let key in this._contacts) {\n\t\t\tlet member = this._contacts[key];\n\n\t\t\t// 构造好友对象，并添加到数组中\n\t\t\tmembers.push({\n\t\t\t\tusername: member[\"UserName\"],\n\t\t\t\tnickname: this._Contact.getDisplayName(member),\n\t\t\t\tpy: member[\"RemarkPYQuanPin\"] ? member[\"RemarkPYQuanPin\"] : member[\"PYQuanPin\"],\n\t\t\t\tavatar: member.AvatarUrl,\n\t\t\t});\n\t\t}\n\n\t\treturn members;\n\t}\n\n\t/**\n\t * 获取联系人列表，包括好友、群聊、公众号等\n\t * @param {number} Seq - 联系人列表的起始标识，默认为0\n\t * @returns {Promise<Array>} - 联系人列表数组\n\t */\n\tasync contactList(Seq = 0) {\n\t\tlet contacts = [];\n\n\t\treturn this.fetchContacts(Seq)\n\t\t\t.then((res) => {\n\t\t\t\tcontacts = res.MemberList || [];\n\t\t\t\tif (res.Seq) {\n\t\t\t\t\treturn this.contactList(res.Seq).then((_contacts) => (contacts = contacts.concat(_contacts || [])));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tif (Seq == 0) {\n\t\t\t\t\t// 批量获取空群聊的详细信息\n\t\t\t\t\tlet emptyGroup = contacts.filter((contact) => contact.UserName.startsWith(\"@@\") && contact.MemberCount == 0);\n\t\t\t\t\tif (emptyGroup.length != 0) {\n\t\t\t\t\t\treturn this.fetchBatchContactInfo(emptyGroup).then((_contacts) => (contacts = contacts.concat(_contacts || [])));\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn contacts;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn contacts;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\t// 发生错误时触发错误事件，并返回已经获取到的联系人列表\n\t\t\t\tthis.emit(\"error\", err);\n\t\t\t\treturn contacts;\n\t\t\t});\n\t}\n\n\t/**\n\t * 发送消息\n\t * @param {string|object} msg - 要发送的消息内容，可以是文本或多媒体对象\n\t * @param {string} toUserName - 接收消息的用户标识\n\t * @returns {Promise} - 返回一个Promise对象，表示发送消息的异步操作\n\t */\n\tasync sendMessage(msg, toUserName) {\n\t\t// 如果msg是文本类型，则调用sendTextMessage方法发送文本消息\n\t\tif (typeof msg !== \"object\") {\n\t\t\treturn this.sendTextMessage(msg, toUserName);\n\t\t}\n\n\t\t// 如果msg包含emoticonMd5属性，则调用sendEmoticonMessage方法发送表情消息\n\t\telse if (msg.emoticonMd5) {\n\t\t\treturn this.sendEmoticonMessage(msg.emoticonMd5, toUserName);\n\t\t}\n\n\t\t// 否则，将消息上传到服务器，并根据文件类型选择发送对应类型的消息\n\t\telse {\n\t\t\treturn this.uploadMedia(msg.file, msg.filename, toUserName).then((res) => {\n\t\t\t\tswitch (res.ext) {\n\t\t\t\t\tcase \"bmp\":\n\t\t\t\t\tcase \"jpeg\":\n\t\t\t\t\tcase \"jpg\":\n\t\t\t\t\tcase \"png\":\n\t\t\t\t\t\t// 如果是图片文件，则调用sendPictureMessage方法发送图片消息\n\t\t\t\t\t\treturn this.sendPictureMessage(res.mediaId, toUserName);\n\t\t\t\t\tcase \"gif\":\n\t\t\t\t\t\t// 如果是GIF文件，则调用sendEmoticonMessage方法发送表情消息\n\t\t\t\t\t\treturn this.sendEmoticonMessage(res.mediaId, toUserName);\n\t\t\t\t\tcase \"mp4\":\n\t\t\t\t\t\t// 如果是视频文件，则调用sendVideoMessage方法发送视频消息\n\t\t\t\t\t\treturn this.sendVideoMessage(res.mediaId, toUserName);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// 其他类型的文件，则调用sendDocumentMessage方法发送文件消息\n\t\t\t\t\t\treturn this.sendDocumentMessage(res.mediaId, res.name, res.size, res.ext, toUserName);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * @description 设置获取轮询消息文本内容的回调函数\n\t * @param {Function} func - 回调函数\n\t */\n\tsetPollingMessageGetter(func) {\n\t\tif (typeof func !== \"function\") return;\n\t\tif (typeof func() !== \"string\") return;\n\t\tthis._getPollingMessage = func;\n\t}\n\n\t/**\n\t * @description 设置获取轮询消息间隔时间的回调函数\n\t * @param {Function} func - 回调函数\n\t */\n\tsetPollingIntervalGetter(func) {\n\t\tif (typeof func !== \"function\") return;\n\t\tif (typeof func() !== \"number\") return;\n\t\tthis._getPollingInterval = func;\n\t}\n\n\t/**\n\t * @description 设置获取轮询消息目标用户的回调函数\n\t * @param {Function} func - 回调函数\n\t */\n\tsetPollingTargetGetter(func) {\n\t\tif (typeof func !== \"function\") return;\n\t\tif (typeof func() !== \"string\") return;\n\t\tthis._getPollingTarget = func;\n\t}\n\n\t/**\n\t * 开始同步消息\n\t * @param {number} id - 当前同步操作的ID\n\t */\n\tsyncPolling(id = ++this._syncPollingId) {\n\t\t// 如果当前状态不是登录状态，或者当前同步操作的ID与传入的ID不一致，则直接返回\n\t\tif (this._state !== this._config.STATE.login || this._syncPollingId !== id) {\n\t\t\treturn;\n\t\t}\n\n\t\t// 调用 performSyncCheck 方法检查同步状态\n\t\tthis.performSyncCheck()\n\t\t\t.then((selector) => {\n\t\t\t\tdebug(\"Sync Check Selector: \", selector);\n\n\t\t\t\t// 如果同步状态不是正常状态，则调用sync方法进行同步\n\t\t\t\tif (+selector !== this._config.SYNCCHECK_SELECTOR_NORMAL) {\n\t\t\t\t\treturn this.performSync().then((data) => {\n\t\t\t\t\t\tthis._syncErrorCount = 0;\n\t\t\t\t\t\tthis.handleSync(data);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\t// 更新最后同步时间，并继续进行同步操作\n\t\t\t\tthis._lastSyncTime = Date.now();\n\t\t\t\tthis.syncPolling(id);\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\t// 如果当前状态已经不是登录状态，则直接返回\n\t\t\t\tif (this._state !== this._config.STATE.login) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdebug(err);\n\n\t\t\t\t// 如果出现已经退出登录的错误，则停止操作\n\t\t\t\tif (err instanceof AlreadyLogoutError) {\n\t\t\t\t\tthis.stop();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// 否则，触发错误事件，并根据同步错误次数进行重试或重启操作\n\t\t\t\tthis.emit(\"error\", err);\n\n\t\t\t\tif (++this._syncErrorCount > 2) {\n\t\t\t\t\tlet err = new Error(`连续${this._syncErrorCount}次同步失败，5s后尝试重启`);\n\t\t\t\t\tdebug(err);\n\t\t\t\t\tthis.emit(\"error\", err);\n\n\t\t\t\t\tclearTimeout(this._retryPollingId);\n\t\t\t\t\tsetTimeout(() => this.restart(), 5 * 1000);\n\t\t\t\t} else {\n\t\t\t\t\tclearTimeout(this._retryPollingId);\n\t\t\t\t\tthis._retryPollingId = setTimeout(() => this.syncPolling(id), 2000 * this._syncErrorCount);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * 检查轮询状态\n\t */\n\tcheckPolling() {\n\t\t// 如果当前状态已经不是登录状态，则直接返回\n\t\tif (this._state !== this._config.STATE.login) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet interval = Date.now() - this._lastSyncTime;\n\t\tif (interval > 1 * 60 * 1000) {\n\t\t\tlet err = new Error(`状态同步超过${interval / 1000}s未响应，5s后尝试重启`);\n\t\t\tdebug(err);\n\t\t\tthis.emit(\"error\", err);\n\n\t\t\tclearTimeout(this._checkPollingId);\n\t\t\tsetTimeout(() => this.restart(), 5 * 1000);\n\t\t} else {\n\t\t\tdebug(\"心跳\");\n\n\t\t\tthis.sendMobileNotification().catch((err) => {\n\t\t\t\tdebug(err);\n\t\t\t\tthis.emit(\"error\", err);\n\t\t\t});\n\n\t\t\tthis.sendMessage(this._getPollingMessage(), this._getPollingTarget()).catch((err) => {\n\t\t\t\tdebug(err);\n\t\t\t\tthis.emit(\"error\", err);\n\t\t\t});\n\n\t\t\tclearTimeout(this._checkPollingId);\n\n\t\t\tthis._checkPollingId = setTimeout(() => this.checkPolling(), this._getPollingInterval());\n\t\t}\n\t}\n\n\t/**\n\t * 处理同步数据\n\t * @param {Object} data - 同步数据\n\t */\n\thandleSync(data) {\n\t\tif (!data) {\n\t\t\tthis.restart();\n\t\t\treturn;\n\t\t}\n\n\t\tif (data.AddMsgCount) {\n\t\t\tdebug(\"syncPolling messages count: \", data.AddMsgCount);\n\t\t\tthis.handleMessage(data.AddMsgList);\n\t\t}\n\n\t\tif (data.ModContactCount) {\n\t\t\tdebug(\"syncPolling ModContactList count: \", data.ModContactCount);\n\t\t\tthis.handleContact(data.ModContactList);\n\t\t}\n\t}\n\n\t/**\n\t * 处理消息数据\n\t * @param {Array} data - 消息数据列表\n\t */\n\thandleMessage(data) {\n\t\tdata.forEach((msg) => {\n\t\t\tPromise.resolve()\n\t\t\t\t.then(() => {\n\t\t\t\t\tif (!this._contacts[msg.FromUserName] || (msg.FromUserName.startsWith(\"@@\") && this._contacts[msg.FromUserName].MemberCount == 0)) {\n\t\t\t\t\t\treturn this.batchGetContact([\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tUserName: msg.FromUserName,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t])\n\t\t\t\t\t\t\t.then((contacts) => {\n\t\t\t\t\t\t\t\tthis.handleContact(contacts);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\t\tdebug(err);\n\t\t\t\t\t\t\t\tthis.emit(\"error\", err);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tmsg = this._Message.extend(msg);\n\t\t\t\t\tthis.emit(\"message\", msg);\n\n\t\t\t\t\tif (msg.MsgType === this._config.MSGTYPE_STATUSNOTIFY) {\n\t\t\t\t\t\tlet userList = msg.StatusNotifyUserName.split(\",\")\n\t\t\t\t\t\t\t.filter((UserName) => !this._contacts[UserName])\n\t\t\t\t\t\t\t.map((UserName) => {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tUserName: UserName,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tPromise.all(\n\t\t\t\t\t\t\t_.chunk(userList, 50).map((list) => {\n\t\t\t\t\t\t\t\treturn this.batchGetContact(list).then((res) => {\n\t\t\t\t\t\t\t\t\tdebug(\"batchGetContact data length: \", res.length);\n\t\t\t\t\t\t\t\t\tthis.handleContact(res);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t).catch((err) => {\n\t\t\t\t\t\t\tdebug(err);\n\t\t\t\t\t\t\tthis.emit(\"error\", err);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((msg.ToUserName === \"filehelper\" && msg.Content === \"退出wechat4u\") || /^(.\\udf1a\\u0020\\ud83c.){3}$/.test(msg.Content)) {\n\t\t\t\t\t\tthis.stop();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tthis.emit(\"error\", err);\n\t\t\t\t\tdebug(err);\n\t\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * 处理联系人数据\n\t * @param {Array} data - 联系人数据列表\n\t */\n\thandleContact(data) {\n\t\tif (!data || data.length == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tdata.forEach((contact) => {\n\t\t\tif (this._contacts[contact.UserName]) {\n\t\t\t\tlet oldContact = this._contacts[contact.UserName];\n\n\t\t\t\t// 清除无效的字段\n\t\t\t\tfor (let i in contact) {\n\t\t\t\t\tcontact[i] || delete contact[i];\n\t\t\t\t}\n\n\t\t\t\tObject.assign(oldContact, contact);\n\n\t\t\t\tthis._Contact.extend(oldContact);\n\t\t\t} else {\n\t\t\t\tthis._contacts[contact.UserName] = this._Contact.extend(contact);\n\t\t\t}\n\t\t});\n\n\t\tthis.emit(\"contacts-updated\", data);\n\t}\n\n\t/**\n\t * 登录微信机器人\n\t * @returns {Promise} - 登录成功时返回一个Promise对象，否则返回错误信息\n\t */\n\tasync _login() {\n\t\t/**\n\t\t * 定义一个递归函数，用于检查登录状态直到成功为止\n\t\t * @returns\n\t\t */\n\t\tconst checkLogin = () => {\n\t\t\treturn this.checkLogin().then((res) => {\n\t\t\t\tif (res.code === 201 && res.userAvatar) {\n\t\t\t\t\tthis.emit(\"user-avatar\", res.userAvatar);\n\t\t\t\t}\n\n\t\t\t\tif (res.code !== 200) {\n\t\t\t\t\tdebug(\"checkLogin: \", res.code);\n\t\t\t\t\treturn checkLogin();\n\t\t\t\t} else {\n\t\t\t\t\treturn res;\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t// 首先获取UUID，然后触发uuid事件，并将当前状态设置为uuid\n\t\treturn this.getUUID()\n\t\t\t.then((uuid) => {\n\t\t\t\tdebug(\"getUUID: \", uuid);\n\t\t\t\tthis.emit(\"uuid\", uuid);\n\n\t\t\t\tthis._state = this._config.STATE.uuid;\n\t\t\t\treturn checkLogin();\n\t\t\t})\n\t\t\t.then((res) => {\n\t\t\t\tdebug(\"checkLogin: \", res.redirect_uri);\n\t\t\t\treturn this.login();\n\t\t\t});\n\t}\n\n\t/**\n\t * 初始化微信机器人，包括登录、获取联系人列表等操作\n\t * @returns {Promise} - 初始化成功时返回一个Promise对象，否则返回错误信息\n\t */\n\tasync _init() {\n\t\treturn this.init().then((data) => {\n\t\t\t// 更新联系人列表\n\t\t\tthis.handleContact(data.ContactList);\n\n\t\t\t// 发送移动端通知\n\t\t\tthis.sendMobileNotification().catch((err) => this.emit(\"error\", err));\n\n\t\t\t// 获取联系人列表并更新\n\t\t\tthis.contactList().then((contacts) => {\n\t\t\t\tdebug(\"getContact count: \", contacts.length);\n\t\t\t\tthis.handleContact(contacts);\n\t\t\t});\n\n\t\t\t// 触发init和login事件\n\t\t\tthis.emit(\"init\", data);\n\n\t\t\tthis._lastSyncTime = Date.now();\n\t\t\tthis._state = this._config.STATE.login;\n\n\t\t\tthis.syncPolling();\n\t\t\tthis.checkPolling();\n\n\t\t\tthis.emit(\"login\");\n\t\t});\n\t}\n\n\t/**\n\t * 启动微信机器人\n\t * @returns {Promise} - 启动成功时返回一个Promise对象，否则返回错误信息\n\t */\n\tasync start() {\n\t\tdebug(\"启动中...\");\n\t\ttry {\n\t\t\tawait this._login();\n\t\t\tawait this._init();\n\t\t} catch (err) {\n\t\t\tdebug(err);\n\t\t\tthis.emit(\"error\", err);\n\t\t\tthis.stop();\n\t\t}\n\t}\n\n\t/**\n\t * 重启微信机器人\n\t * @returns {Promise} - 重启成功时返回一个Promise对象，否则返回错误信息\n\t */\n\tasync restart() {\n\t\tdebug(\"重启中...\");\n\t\ttry {\n\t\t\tawait this._init();\n\t\t} catch (err) {\n\t\t\tif (err instanceof AlreadyLogoutError) {\n\t\t\t\tthis.emit(\"logout\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (err.response) {\n\t\t\t\tthrow err;\n\t\t\t} else {\n\t\t\t\tlet err = new Error(\"重启时网络错误，60s后进行最后一次重启\");\n\n\t\t\t\tdebug(err);\n\t\t\t\tthis.emit(\"error\", err);\n\n\t\t\t\tawait new Promise((resolve) => {\n\t\t\t\t\tsetTimeout(resolve, 60 * 1000);\n\t\t\t\t});\n\n\t\t\t\ttry {\n\t\t\t\t\tconst data = await this.init();\n\t\t\t\t\tthis.handleContact(data.ContactList);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tdebug(err);\n\t\t\t\t\tthis.emit(\"error\", err);\n\n\t\t\t\t\tthis.stop();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 停止微信机器人\n\t */\n\tstop() {\n\t\tdebug(\"登出中...\");\n\n\t\tclearTimeout(this._retryPollingId);\n\t\tclearTimeout(this._checkPollingId);\n\n\t\tthis.logout();\n\n\t\tthis._state = this._config.STATE.logout;\n\n\t\tthis.emit(\"logout\");\n\t}\n}\n"]}