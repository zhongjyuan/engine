{"version":3,"sources":["../../modules/wechatbot_node/bot.js"],"names":["WeChatBot","data","_state","STATE","init","_contacts","_lastSyncTime","_syncPollingId","_syncErrorCount","_checkPollingId","_retryPollingId","_Contact","_Message","Date","toLocaleString","id","login","performSyncCheck","then","selector","emit","_config","SYNCCHECK_SELECTOR_NORMAL","performSync","_handleSync","now","_syncPolling","catch","err","AlreadyLogoutError","stop","Error","clearTimeout","setTimeout","restart","interval","sendMobileNotification","sendMessage","_getPollingMessage","_getPollingTarget","_checkPolling","_getPollingInterval","AddMsgCount","_handleMessage","AddMsgList","ModContactCount","_handleContact","ModContactList","forEach","message","Promise","resolve","FromUserName","startsWith","MemberCount","fetchBatchContactInfo","UserName","contacts","extend","MsgType","MSGTYPE_STATUSNOTIFY","userList","StatusNotifyUserName","split","filter","map","all","_","chunk","list","res","ToUserName","Content","test","length","contact","oldContact","i","Object","assign","Seq","fetchContacts","MemberList","contactList","concat","emptyGroup","checkLogin","code","userAvatar","getUUID","uuid","redirect_uri","ContactList","_login","_init","response","logout","toUserName","sendTextMessage","emoticonMd5","sendEmoticonMessage","uploadMedia","file","filename","ext","sendPictureMessage","mediaId","sendVideoMessage","sendDocumentMessage","name","size","func","dic","fileName","filePath","fs","existsSync","unlinkSync","dirPath","mkdirSync","recursive","writeFileSync","path","join","key","push","username","nickname","getDisplayName","py","avatar","AvatarUrl","WeChatClient"],"mappings":"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","file":"bot.js","sourcesContent":["import fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nimport ContactFactory from \"./contact\";\r\nimport MessageFactory from \"./message\";\r\n\r\nimport WeChatClient, { AlreadyLogoutError } from \"./client\";\r\n\r\n/**\r\n * 微信机器人对象，继承自WeChatClient类\r\n */\r\nexport default class WeChatBot extends WeChatClient {\r\n\t/**\r\n\t * 构造函数\r\n\t * @param {Object} data - 包含微信账号登录信息的数据对象\r\n\t */\r\n\tconstructor(data = {}) {\r\n\t\tsuper(data);\r\n\r\n\t\t/**状态 */\r\n\t\tthis._state = this.STATE.init;\r\n\r\n\t\t/**所有联系人的集合 */\r\n\t\tthis._contacts = {};\r\n\r\n\t\t/**上一次同步时间 */\r\n\t\tthis._lastSyncTime = 0;\r\n\t\t/**同步轮询ID */\r\n\t\tthis._syncPollingId = 0;\r\n\t\t/**同步错误计数 */\r\n\t\tthis._syncErrorCount = 0;\r\n\t\t/**检查轮询ID */\r\n\t\tthis._checkPollingId = 0;\r\n\t\t/**重试轮询ID */\r\n\t\tthis._retryPollingId = 0;\r\n\r\n\t\t/**Contact工厂对象 */\r\n\t\tthis._Contact = ContactFactory(this);\r\n\t\t/**Message工厂对象 */\r\n\t\tthis._Message = MessageFactory(this);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取好友列表\r\n\t * @returns {Array} - 包含好友信息的数组\r\n\t */\r\n\tget friendList() {\r\n\t\tlet contacts = [];\r\n\r\n\t\t// 遍历联系人列表，获取好友信息\r\n\t\tfor (let key in this._contacts) {\r\n\t\t\tlet contact = this._contacts[key];\r\n\r\n\t\t\t// 构造好友对象，并添加到数组中\r\n\t\t\tcontacts.push({\r\n\t\t\t\tusername: contact[\"UserName\"],\r\n\t\t\t\tnickname: this._Contact.getDisplayName(contact),\r\n\t\t\t\tpy: contact[\"RemarkPYQuanPin\"] ? contact[\"RemarkPYQuanPin\"] : contact[\"PYQuanPin\"],\r\n\t\t\t\tavatar: contact.AvatarUrl,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn contacts;\r\n\t}\r\n\r\n\t/**\r\n\t * @description 获取轮询消息的默认文本内容\r\n\t * @return {String} 默认文本内容\r\n\t */\r\n\t_getPollingMessage() {\r\n\t\treturn \"Bot Health：\" + new Date().toLocaleString();\r\n\t}\r\n\r\n\t/**\r\n\t * @description 获取轮询消息的默认间隔时间\r\n\t * @return {Number} 默认间隔时间，单位为毫秒\r\n\t */\r\n\t_getPollingInterval() {\r\n\t\treturn 5 * 60 * 1000;\r\n\t}\r\n\r\n\t/**\r\n\t * @description 获取轮询消息的默认目标用户\r\n\t * @return {String} 默认目标用户\r\n\t */\r\n\t_getPollingTarget() {\r\n\t\treturn \"filehelper\";\r\n\t}\r\n\r\n\t/**\r\n\t * 开始同步消息\r\n\t * @param {number} id - 当前同步操作的ID\r\n\t */\r\n\t_syncPolling(id = ++this._syncPollingId) {\r\n\t\t// 如果当前状态不是登录状态，或者当前同步操作的ID与传入的ID不一致，则直接返回\r\n\t\tif (this._state !== this.STATE.login || this._syncPollingId !== id) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 调用 performSyncCheck 方法检查同步状态\r\n\t\tthis.performSyncCheck()\r\n\t\t\t.then((selector) => {\r\n\t\t\t\tthis.emit(\"synccheck_selector\", selector);\r\n\t\t\t\t// 如果同步状态不是正常状态，则调用sync方法进行同步\r\n\t\t\t\tif (+selector !== this._config.SYNCCHECK_SELECTOR_NORMAL) {\r\n\t\t\t\t\treturn this.performSync().then((data) => {\r\n\t\t\t\t\t\tthis._syncErrorCount = 0;\r\n\t\t\t\t\t\tthis._handleSync(data);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then(() => {\r\n\t\t\t\tthis._lastSyncTime = Date.now(); // 更新最后同步时间，并继续进行同步操作\r\n\t\t\t\tthis._syncPolling(id);\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\t// 如果当前状态已经不是登录状态，则直接返回\r\n\t\t\t\tif (this._state !== this.STATE.login) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 如果出现已经退出登录的错误，则停止操作\r\n\t\t\t\tif (err instanceof AlreadyLogoutError) {\r\n\t\t\t\t\tthis.stop();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (++this._syncErrorCount > 2) {\r\n\t\t\t\t\tthis.emit(\"error\", new Error(`连续${this._syncErrorCount}次同步失败，5s后尝试重启`));\r\n\r\n\t\t\t\t\tclearTimeout(this._retryPollingId);\r\n\r\n\t\t\t\t\tsetTimeout(() => this.restart(), 5 * 1000);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tclearTimeout(this._retryPollingId);\r\n\r\n\t\t\t\t\tthis._retryPollingId = setTimeout(() => this._syncPolling(id), 2000 * this._syncErrorCount);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * 检查轮询状态\r\n\t */\r\n\t_checkPolling() {\r\n\t\t// 如果当前状态已经不是登录状态，则直接返回\r\n\t\tif (this._state !== this.STATE.login) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet interval = Date.now() - this._lastSyncTime;\r\n\t\tif (interval > 1 * 60 * 1000) {\r\n\t\t\tthis.emit(\"error\", new Error(`状态同步超过${interval / 1000}s未响应，5s后尝试重启`));\r\n\r\n\t\t\tclearTimeout(this._checkPollingId);\r\n\t\t\tsetTimeout(() => this.restart(), 5 * 1000);\r\n\t\t} else {\r\n\t\t\tthis.emit(\"polling\");\r\n\r\n\t\t\tthis.sendMobileNotification();\r\n\r\n\t\t\tthis.sendMessage(this._getPollingMessage(), this._getPollingTarget());\r\n\r\n\t\t\tclearTimeout(this._checkPollingId);\r\n\r\n\t\t\tthis._checkPollingId = setTimeout(() => this._checkPolling(), this._getPollingInterval());\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 处理同步数据\r\n\t * @param {Object} data - 同步数据\r\n\t */\r\n\t_handleSync(data) {\r\n\t\tif (!data) {\r\n\t\t\tthis.restart();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (data.AddMsgCount) {\r\n\t\t\tthis._handleMessage(data.AddMsgList);\r\n\t\t}\r\n\r\n\t\tif (data.ModContactCount) {\r\n\t\t\tthis._handleContact(data.ModContactList);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 处理消息数据\r\n\t * @param {Array} data - 消息数据列表\r\n\t */\r\n\t_handleMessage(data) {\r\n\t\tdata.forEach((message) => {\r\n\t\t\tPromise.resolve()\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\t!this._contacts[message.FromUserName] ||\r\n\t\t\t\t\t\t(message.FromUserName.startsWith(\"@@\") && this._contacts[message.FromUserName].MemberCount == 0)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\treturn this.fetchBatchContactInfo([{ UserName: message.FromUserName }]).then((contacts) => {\r\n\t\t\t\t\t\t\tthis._handleContact(contacts);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\tmessage = this._Message.extend(message);\r\n\r\n\t\t\t\t\tif (message.MsgType === this._config.MSGTYPE_STATUSNOTIFY) {\r\n\t\t\t\t\t\tlet userList = message.StatusNotifyUserName.split(\",\")\r\n\t\t\t\t\t\t\t.filter((UserName) => !this._contacts[UserName])\r\n\t\t\t\t\t\t\t.map((UserName) => {\r\n\t\t\t\t\t\t\t\treturn { UserName: UserName };\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tPromise.all(\r\n\t\t\t\t\t\t\t_.chunk(userList, 50).map(async (list) => {\r\n\t\t\t\t\t\t\t\tconst res = await this.fetchBatchContactInfo(list);\r\n\t\t\t\t\t\t\t\tthis._handleContact(res);\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t).catch((err) => {\r\n\t\t\t\t\t\t\tthis.emit(\"error\", err);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ((message.ToUserName === \"filehelper\" && message.Content === \"退出wechatgpt\") || /^(.\\udf1a\\u0020\\ud83c.){3}$/.test(message.Content)) {\r\n\t\t\t\t\t\tthis.stop();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.emit(\"message\", message);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\tthis.emit(\"error\", err);\r\n\t\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * 处理联系人数据\r\n\t * @param {Array} data - 联系人数据列表\r\n\t */\r\n\t_handleContact(data) {\r\n\t\tif (!data || data.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tdata.forEach((contact) => {\r\n\t\t\tif (this._contacts[contact.UserName]) {\r\n\t\t\t\tlet oldContact = this._contacts[contact.UserName];\r\n\r\n\t\t\t\t// 清除无效的字段\r\n\t\t\t\tfor (let i in contact) {\r\n\t\t\t\t\tcontact[i] || delete contact[i];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tObject.assign(oldContact, contact);\r\n\r\n\t\t\t\tthis._Contact.extend(oldContact);\r\n\t\t\t} else {\r\n\t\t\t\tthis._contacts[contact.UserName] = this._Contact.extend(contact);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.emit(\"contact\", data);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取联系人列表，包括好友、群聊、公众号等\r\n\t * @param {number} Seq - 联系人列表的起始标识，默认为0\r\n\t * @returns {Promise<Array>} - 联系人列表数组\r\n\t */\r\n\tasync contactList(Seq = 0) {\r\n\t\tlet contacts = [];\r\n\r\n\t\treturn this.fetchContacts(Seq)\r\n\t\t\t.then((res) => {\r\n\t\t\t\tcontacts = res.MemberList || [];\r\n\t\t\t\tif (res.Seq) {\r\n\t\t\t\t\treturn this.contactList(res.Seq).then((contacts) => (contacts = contacts.concat(contacts || [])));\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then(() => {\r\n\t\t\t\tif (Seq == 0) {\r\n\t\t\t\t\t// 批量获取空群聊的详细信息\r\n\t\t\t\t\tlet emptyGroup = contacts.filter((contact) => contact.UserName.startsWith(\"@@\") && contact.MemberCount == 0);\r\n\t\t\t\t\tif (emptyGroup.length != 0) {\r\n\t\t\t\t\t\treturn this.fetchBatchContactInfo(emptyGroup).then((contacts) => (contacts = contacts.concat(contacts || [])));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn contacts;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn contacts;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch(() => {\r\n\t\t\t\treturn contacts;\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * 登录微信机器人\r\n\t * @returns {Promise} - 登录成功时返回一个Promise对象，否则返回错误信息\r\n\t */\r\n\tasync _login() {\r\n\t\t/**\r\n\t\t * 定义一个递归函数，用于检查登录状态直到成功为止\r\n\t\t * @returns\r\n\t\t */\r\n\t\tconst checkLogin = () => {\r\n\t\t\treturn this.checkLogin().then((res) => {\r\n\t\t\t\tif (res.code === 201 && res.userAvatar) {\r\n\t\t\t\t\tthis.emit(\"user-avatar\", res.userAvatar);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (res.code !== 200) {\r\n\t\t\t\t\treturn checkLogin();\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn res;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t// 首先获取UUID，然后触发uuid事件，并将当前状态设置为uuid\r\n\t\treturn this.getUUID()\r\n\t\t\t.then((uuid) => {\r\n\t\t\t\tthis.emit(\"uuid\", uuid);\r\n\r\n\t\t\t\tthis._state = this.STATE.uuid;\r\n\r\n\t\t\t\treturn checkLogin();\r\n\t\t\t})\r\n\t\t\t.then((res) => {\r\n\t\t\t\tthis.emit(\"redirect-uri\", res.redirect_uri);\r\n\r\n\t\t\t\treturn this.login();\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * 初始化微信机器人，包括登录、获取联系人列表等操作\r\n\t * @returns {Promise} - 初始化成功时返回一个Promise对象，否则返回错误信息\r\n\t */\r\n\tasync _init() {\r\n\t\treturn this.init()\r\n\t\t\t.then((data) => {\r\n\t\t\t\t// 更新联系人列表\r\n\t\t\t\tthis._handleContact(data.ContactList);\r\n\r\n\t\t\t\t// 发送移动端通知\r\n\t\t\t\tthis.sendMobileNotification();\r\n\r\n\t\t\t\t// 获取联系人列表并更新\r\n\t\t\t\tthis.contactList().then((contacts) => {\r\n\t\t\t\t\tthis._handleContact(contacts);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// 触发init和login事件\r\n\t\t\t\tthis.emit(\"init\", data);\r\n\r\n\t\t\t\tthis._state = this.STATE.login;\r\n\t\t\t\tthis._lastSyncTime = Date.now();\r\n\r\n\t\t\t\tthis._syncPolling();\r\n\t\t\t\tthis._checkPolling();\r\n\r\n\t\t\t\tthis.emit(\"login\");\r\n\t\t\t})\r\n\t\t\t.catch((err) => this.emit(\"error\", err));\r\n\t}\r\n\r\n\t/**\r\n\t * 启动微信机器人\r\n\t * @returns {Promise} - 启动成功时返回一个Promise对象，否则返回错误信息\r\n\t */\r\n\tasync start() {\r\n\t\ttry {\r\n\t\t\tthis.emit(\"start\");\r\n\t\t\tawait this._login();\r\n\t\t\tawait this._init();\r\n\t\t} catch (err) {\r\n\t\t\tthis.emit(\"error\", err);\r\n\t\t\tthis.stop();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 重启微信机器人\r\n\t * @returns {Promise} - 重启成功时返回一个Promise对象，否则返回错误信息\r\n\t */\r\n\tasync restart() {\r\n\t\ttry {\r\n\t\t\tthis.emit(\"restart\");\r\n\t\t\tawait this._init();\r\n\t\t} catch (err) {\r\n\t\t\tif (err instanceof AlreadyLogoutError) {\r\n\t\t\t\tthis.stop();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (err.response) {\r\n\t\t\t\tthrow err;\r\n\t\t\t} else {\r\n\t\t\t\tthis.emit(\"error\", new Error(\"重启时网络错误，60s后进行最后一次重启\"));\r\n\r\n\t\t\t\tawait new Promise((resolve) => {\r\n\t\t\t\t\tsetTimeout(resolve, 60 * 1000);\r\n\t\t\t\t});\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst data = await this.init();\r\n\t\t\t\t\tthis._handleContact(data.ContactList);\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\tthis.emit(\"error\", err);\r\n\t\t\t\t\tthis.stop();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 停止微信机器人\r\n\t */\r\n\tstop() {\r\n\t\tclearTimeout(this._retryPollingId);\r\n\t\tclearTimeout(this._checkPollingId);\r\n\r\n\t\tthis.logout();\r\n\r\n\t\tthis._state = this.STATE.logout;\r\n\r\n\t\tthis.emit(\"logout\");\r\n\t}\r\n\r\n\t/**\r\n\t * 发送消息\r\n\t * @param {string|object} message - 要发送的消息内容，可以是文本或多媒体对象\r\n\t * @param {string} toUserName - 接收消息的用户标识\r\n\t * @returns {Promise} - 返回一个Promise对象，表示发送消息的异步操作\r\n\t */\r\n\tasync sendMessage(message, toUserName) {\r\n\t\t// 如果msg是文本类型，则调用sendTextMessage方法发送文本消息\r\n\t\tif (typeof message !== \"object\") {\r\n\t\t\treturn this.sendTextMessage(message, toUserName);\r\n\t\t}\r\n\r\n\t\t// 如果msg包含emoticonMd5属性，则调用sendEmoticonMessage方法发送表情消息\r\n\t\telse if (message.emoticonMd5) {\r\n\t\t\treturn this.sendEmoticonMessage(message.emoticonMd5, toUserName);\r\n\t\t}\r\n\r\n\t\t// 否则，将消息上传到服务器，并根据文件类型选择发送对应类型的消息\r\n\t\telse {\r\n\t\t\treturn this.uploadMedia(message.file, message.filename, toUserName).then((res) => {\r\n\t\t\t\tswitch (res.ext) {\r\n\t\t\t\t\tcase \"bmp\":\r\n\t\t\t\t\tcase \"jpeg\":\r\n\t\t\t\t\tcase \"jpg\":\r\n\t\t\t\t\tcase \"png\":\r\n\t\t\t\t\t\t// 如果是图片文件，则调用sendPictureMessage方法发送图片消息\r\n\t\t\t\t\t\treturn this.sendPictureMessage(res.mediaId, toUserName);\r\n\t\t\t\t\tcase \"gif\":\r\n\t\t\t\t\t\t// 如果是GIF文件，则调用sendEmoticonMessage方法发送表情消息\r\n\t\t\t\t\t\treturn this.sendEmoticonMessage(res.mediaId, toUserName);\r\n\t\t\t\t\tcase \"mp4\":\r\n\t\t\t\t\t\t// 如果是视频文件，则调用sendVideoMessage方法发送视频消息\r\n\t\t\t\t\t\treturn this.sendVideoMessage(res.mediaId, toUserName);\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t// 其他类型的文件，则调用sendDocumentMessage方法发送文件消息\r\n\t\t\t\t\t\treturn this.sendDocumentMessage(res.mediaId, res.name, res.size, res.ext, toUserName);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @description 设置获取轮询消息文本内容的回调函数\r\n\t * @param {Function} func - 回调函数\r\n\t */\r\n\tsetPollingMessageGetter(func) {\r\n\t\tif (typeof func !== \"function\") return;\r\n\t\tif (typeof func() !== \"string\") return;\r\n\t\tthis._getPollingMessage = func;\r\n\t}\r\n\r\n\t/**\r\n\t * @description 设置获取轮询消息间隔时间的回调函数\r\n\t * @param {Function} func - 回调函数\r\n\t */\r\n\tsetPollingIntervalGetter(func) {\r\n\t\tif (typeof func !== \"function\") return;\r\n\t\tif (typeof func() !== \"number\") return;\r\n\t\tthis._getPollingInterval = func;\r\n\t}\r\n\r\n\t/**\r\n\t * @description 设置获取轮询消息目标用户的回调函数\r\n\t * @param {Function} func - 回调函数\r\n\t */\r\n\tsetPollingTargetGetter(func) {\r\n\t\tif (typeof func !== \"function\") return;\r\n\t\tif (typeof func() !== \"string\") return;\r\n\t\tthis._getPollingTarget = func;\r\n\t}\r\n\r\n\tdelFile(dic, fileName) {\r\n\t\tconst filePath = `./wechatgpt/${dic}/${fileName}`;\r\n\r\n\t\tfs.existsSync(filePath) && fs.unlinkSync(filePath);\r\n\t}\r\n\r\n\tsaveFile(dic, fileName, data) {\r\n\t\tconst dirPath = `./wechatgpt/${dic}`;\r\n\r\n\t\tif (!fs.existsSync(dirPath)) {\r\n\t\t\tfs.mkdirSync(dirPath, { recursive: true });\r\n\t\t}\r\n\r\n\t\tfs.writeFileSync(path.join(dirPath, fileName), data);\r\n\t}\r\n}\r\n"]}