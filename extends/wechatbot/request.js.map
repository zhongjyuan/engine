{"version":3,"sources":["../../modules/wechatbot/core/request.js"],"names":["Request","defaults","headers","userAgent","timeout","httpAgent","httpsAgent","axios","create","Cookie","interceptors","request","use","config","Object","keys","map","key","join","err","Promise","reject","response","res","setCookie","forEach","item","pm","match","options"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAoCaA,O;AACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QADYA,O,GA4CZ,iBAAYC,QAAZ,EAAsB;AAAA;;AAAA;;AACrB;AACAA,YAAWA,YAAY,EAAvB;AACAA,UAASC,OAAT,GAAmBD,SAASC,OAAT,IAAoB,EAAvC;;AAEA;AACA,KAAI,CAAC,yBAAL,EAAqB;AACpB,MAAIC,YAAY,2HAAhB;AACAF,WAASC,OAAT,CAAiB,YAAjB,IAAiCD,SAASC,OAAT,CAAiB,YAAjB,KAAkCC,SAAnE;AACAF,WAASC,OAAT,CAAiB,YAAjB,IAAiCD,SAASC,OAAT,CAAiB,YAAjB,KAAkC,OAAnE;AACA;;AAED;AACAD,UAASG,OAAT,GAAmB,OAAO,EAA1B;AACAH,UAASI,SAAT,GAAqB,KAArB;AACAJ,UAASK,UAAT,GAAsB,KAAtB;;AAEA;AACA,MAAKC,KAAL,GAAaA,gBAAMC,MAAN,CAAaP,QAAb,CAAb;;AAEA;AACA,KAAI,CAAC,yBAAL,EAAqB;AACpB;AACA,OAAKQ,MAAL,GAAcR,SAASQ,MAAT,IAAmB,EAAjC;AACA,OAAKA,MAAL,CAAY,SAAZ,IAAyB,yBAAzB;AACA,OAAKA,MAAL,CAAY,QAAZ,IAAwB,wBAAa,GAAb,CAAxB;;AAEA;AACA,OAAKF,KAAL,CAAWG,YAAX,CAAwBC,OAAxB,CAAgCC,GAAhC,CACC,UAACC,MAAD,EAAY;AACXA,UAAOX,OAAP,CAAe,QAAf,IAA2BY,OAAOC,IAAP,CAAY,MAAKN,MAAjB,EACzBO,GADyB,CACrB,UAACC,GAAD,EAAS;AACb,WAAUA,GAAV,SAAiB,MAAKR,MAAL,CAAYQ,GAAZ,CAAjB;AACA,IAHyB,EAIzBC,IAJyB,CAIpB,IAJoB,CAA3B;AAKA,UAAOL,MAAP;AACA,GARF,EASC,UAACM,GAAD,EAAS;AACR,UAAOC,QAAQC,MAAR,CAAeF,GAAf,CAAP;AACA,GAXF;;AAcA;AACA,OAAKZ,KAAL,CAAWG,YAAX,CAAwBY,QAAxB,CAAiCV,GAAjC,CACC,UAACW,GAAD,EAAS;AACR,OAAIC,YAAYD,IAAIrB,OAAJ,CAAY,YAAZ,CAAhB;AACA,OAAIsB,SAAJ,EAAe;AACdA,cAAUC,OAAV,CAAkB,UAACC,IAAD,EAAU;AAC3B,SAAIC,KAAKD,KAAKE,KAAL,CAAW,sBAAX,CAAT;AACA,SAAID,EAAJ,EAAQ;AACP,YAAKlB,MAAL,CAAYkB,GAAG,CAAH,CAAZ,IAAqBA,GAAG,CAAH,CAArB;AACA;AACD,KALD;AAMA;AACD,UAAOJ,GAAP;AACA,GAZF,EAaC,UAACJ,GAAD,EAAS;AACR,OAAIA,OAAOA,IAAIG,QAAf,EAAyB;AACxB,WAAOH,IAAIG,QAAJ,CAAaX,OAApB;AACA,WAAOQ,IAAIG,QAAJ,CAAaT,MAApB;AACA;AACD,UAAOO,QAAQC,MAAR,CAAeF,GAAf,CAAP;AACA,GAnBF;AAqBA;;AAED;AACA,MAAKR,OAAL,GAAe,UAACkB,OAAD,EAAa;AAC3B,SAAO,MAAKtB,KAAL,CAAWI,OAAX,CAAmBkB,OAAnB,CAAP;AACA,EAFD;;AAIA,QAAO,KAAKlB,OAAZ;AACA,C","file":"request.js","sourcesContent":["import axios from \"axios\";\r\nimport { isBrowserEnv, randomString } from \"./util\";\r\n\r\n/**\r\n * 创建一个用于发送 HTTP 请求的实例\r\n * @param {object} defaults - 默认配置选项\r\n * @returns {function} - 发送请求的函数\r\n *\r\n * @example\r\n * const request = Request({\r\n *   headers: {\r\n *     \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36\",\r\n *     \"connection\": \"close\"\r\n *   },\r\n *   timeout: 60000,\r\n *   httpAgent: false,\r\n *   httpsAgent: false,\r\n *   Cookie: {\r\n *     pgv_pvi: randomString(),\r\n *     pgv_si: randomString(\"s\")\r\n *   }\r\n * });\r\n *\r\n * const options = {\r\n *   method: \"GET\",\r\n *   url: \"https://api.zhongjyuan.com/data\",\r\n *   params: {\r\n *     id: 12345\r\n *   }\r\n * };\r\n *\r\n * request(options)\r\n *   .then((response) => {\r\n *     console.log(response.data);\r\n *   })\r\n *   .catch((error) => {\r\n *     console.error(error);\r\n *   });\r\n */\r\nexport class Request {\r\n\t/**\r\n\t * 构造函数\r\n\t *\r\n\t * @constructor\r\n\t * @param {object} [defaults] - 默认配置项\r\n\t * @param {object} [defaults.headers] - 默认请求头\r\n\t * @param {string} [defaults.headers.user-agent] - 默认 User-Agent 头\r\n\t * @param {string} [defaults.headers.connection] - 默认 Connection 头\r\n\t * @param {number} [defaults.timeout=60000] - 默认超时时间（毫秒）\r\n\t * @param {boolean} [defaults.httpAgent=false] - 是否开启 HTTP Keep-Alive\r\n\t * @param {boolean} [defaults.httpsAgent=false] - 是否开启 HTTPS Keep-Alive\r\n\t *\r\n\t * @example\r\n\t * const request = Request({\r\n\t *   headers: {\r\n\t *     \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36\",\r\n\t *     \"connection\": \"close\"\r\n\t *   },\r\n\t *   timeout: 60000,\r\n\t *   httpAgent: false,\r\n\t *   httpsAgent: false,\r\n\t *   Cookie: {\r\n\t *     pgv_pvi: randomString(),\r\n\t *     pgv_si: randomString(\"s\")\r\n\t *   }\r\n\t * });\r\n\t *\r\n\t * const options = {\r\n\t *   method: \"GET\",\r\n\t *   url: \"https://api.zhongjyuan.com/data\",\r\n\t *   params: {\r\n\t *     id: 12345\r\n\t *   }\r\n\t * };\r\n\t *\r\n\t * request(options)\r\n\t *   .then((response) => {\r\n\t *     console.log(response.data);\r\n\t *   })\r\n\t *   .catch((error) => {\r\n\t *     console.error(error);\r\n\t *   });\r\n\t */\r\n\tconstructor(defaults) {\r\n\t\t// 对传入的默认配置进行处理\r\n\t\tdefaults = defaults || {};\r\n\t\tdefaults.headers = defaults.headers || {};\r\n\r\n\t\t// 如果不是浏览器环境，则设置默认 User-Agent 和 Connection 头\r\n\t\tif (!isBrowserEnv()) {\r\n\t\t\tvar userAgent = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36\";\r\n\t\t\tdefaults.headers[\"user-agent\"] = defaults.headers[\"user-agent\"] || userAgent;\r\n\t\t\tdefaults.headers[\"connection\"] = defaults.headers[\"connection\"] || \"close\";\r\n\t\t}\r\n\r\n\t\t// 设置默认超时时间、HTTP Keep-Alive 和 HTTPS Keep-Alive\r\n\t\tdefaults.timeout = 1000 * 60;\r\n\t\tdefaults.httpAgent = false;\r\n\t\tdefaults.httpsAgent = false;\r\n\r\n\t\t// 创建 Axios 实例\r\n\t\tthis.axios = axios.create(defaults);\r\n\r\n\t\t// 如果不是浏览器环境，则设置 Cookie 和拦截器\r\n\t\tif (!isBrowserEnv()) {\r\n\t\t\t// 初始化 Cookie，并生成随机的 pgv_pvi 和 pgv_si 属性\r\n\t\t\tthis.Cookie = defaults.Cookie || {};\r\n\t\t\tthis.Cookie[\"pgv_pvi\"] = randomString();\r\n\t\t\tthis.Cookie[\"pgv_si\"] = randomString(\"s\");\r\n\r\n\t\t\t// 添加请求拦截器，将 Cookie 添加到请求头中\r\n\t\t\tthis.axios.interceptors.request.use(\r\n\t\t\t\t(config) => {\r\n\t\t\t\t\tconfig.headers[\"cookie\"] = Object.keys(this.Cookie)\r\n\t\t\t\t\t\t.map((key) => {\r\n\t\t\t\t\t\t\treturn `${key}=${this.Cookie[key]}`;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.join(\"; \");\r\n\t\t\t\t\treturn config;\r\n\t\t\t\t},\r\n\t\t\t\t(err) => {\r\n\t\t\t\t\treturn Promise.reject(err);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\t// 添加响应拦截器，解析 Set-Cookie 头并更新 Cookie\r\n\t\t\tthis.axios.interceptors.response.use(\r\n\t\t\t\t(res) => {\r\n\t\t\t\t\tlet setCookie = res.headers[\"set-cookie\"];\r\n\t\t\t\t\tif (setCookie) {\r\n\t\t\t\t\t\tsetCookie.forEach((item) => {\r\n\t\t\t\t\t\t\tlet pm = item.match(/^(.+?)\\s?\\=\\s?(.+?);/);\r\n\t\t\t\t\t\t\tif (pm) {\r\n\t\t\t\t\t\t\t\tthis.Cookie[pm[1]] = pm[2];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn res;\r\n\t\t\t\t},\r\n\t\t\t\t(err) => {\r\n\t\t\t\t\tif (err && err.response) {\r\n\t\t\t\t\t\tdelete err.response.request;\r\n\t\t\t\t\t\tdelete err.response.config;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn Promise.reject(err);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// 返回一个封装好的请求方法\r\n\t\tthis.request = (options) => {\r\n\t\t\treturn this.axios.request(options);\r\n\t\t};\r\n\r\n\t\treturn this.request;\r\n\t}\r\n}\r\n"]}